# Generated by Django 4.2.7 on 2025-06-22 08:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('emotions', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='计划标题')),
                ('description', models.TextField(blank=True, max_length=1000, verbose_name='计划描述')),
                ('start_date', models.DateField(verbose_name='开始日期')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='结束日期')),
                ('duration_days', models.PositiveIntegerField(default=7, verbose_name='持续天数')),
                ('status', models.CharField(choices=[('draft', '草稿'), ('active', '进行中'), ('completed', '已完成'), ('paused', '已暂停'), ('cancelled', '已取消')], default='draft', max_length=20, verbose_name='状态')),
                ('progress_percentage', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='进度百分比')),
                ('daily_reminder', models.BooleanField(default=True, verbose_name='每日提醒')),
                ('reminder_time', models.TimeField(default='09:00', verbose_name='提醒时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
            ],
            options={
                'verbose_name': '行动计划',
                'verbose_name_plural': '行动计划',
                'db_table': 'action_plans',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIAnalysisResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('analysis_type', models.CharField(choices=[('basic', '基础分析'), ('deep', '深度分析'), ('pattern', '模式分析'), ('prediction', '趋势预测'), ('recommendation', '建议生成')], max_length=20, verbose_name='分析类型')),
                ('status', models.CharField(choices=[('pending', '等待中'), ('processing', '分析中'), ('completed', '已完成'), ('failed', '失败'), ('cancelled', '已取消')], default='pending', max_length=20, verbose_name='状态')),
                ('ai_model', models.CharField(default='ERNIE-Bot', max_length=50, verbose_name='AI模型')),
                ('model_version', models.CharField(blank=True, max_length=20, verbose_name='模型版本')),
                ('request_id', models.CharField(blank=True, max_length=100, verbose_name='请求ID')),
                ('analysis_result', models.JSONField(blank=True, default=dict, verbose_name='分析结果')),
                ('confidence_score', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='置信度')),
                ('processing_time', models.FloatField(blank=True, null=True, verbose_name='处理时间(秒)')),
                ('error_message', models.TextField(blank=True, verbose_name='错误信息')),
                ('retry_count', models.PositiveIntegerField(default=0, verbose_name='重试次数')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('started_at', models.DateTimeField(blank=True, null=True, verbose_name='开始时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('emotion_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ai_analyses', to='emotions.emotionrecord')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analyses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI分析结果',
                'verbose_name_plural': 'AI分析结果',
                'db_table': 'ai_analysis_results',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PlanTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='任务标题')),
                ('description', models.TextField(blank=True, max_length=500, verbose_name='任务描述')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='排序')),
                ('scheduled_date', models.DateField(blank=True, null=True, verbose_name='计划日期')),
                ('estimated_duration', models.PositiveIntegerField(default=30, verbose_name='预估时长(分钟)')),
                ('status', models.CharField(choices=[('pending', '待办'), ('in_progress', '进行中'), ('completed', '已完成'), ('skipped', '已跳过')], default='pending', max_length=20, verbose_name='状态')),
                ('completion_notes', models.TextField(blank=True, max_length=300, verbose_name='完成备注')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('action_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='ai_analysis.actionplan')),
            ],
            options={
                'verbose_name': '计划任务',
                'verbose_name_plural': '计划任务',
                'db_table': 'plan_tasks',
                'ordering': ['action_plan', 'order', 'scheduled_date'],
            },
        ),
        migrations.CreateModel(
            name='EmotionInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('insight_type', models.CharField(choices=[('emotion_pattern', '情绪模式'), ('trigger_analysis', '触发因素分析'), ('coping_effectiveness', '应对方式效果'), ('emotional_growth', '情绪成长'), ('risk_assessment', '风险评估'), ('strength_identification', '优势识别')], max_length=30, verbose_name='洞察类型')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('description', models.TextField(max_length=1000, verbose_name='描述')),
                ('priority', models.CharField(choices=[('low', '低'), ('medium', '中'), ('high', '高'), ('urgent', '紧急')], default='medium', max_length=10, verbose_name='优先级')),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='可信度')),
                ('supporting_data', models.JSONField(blank=True, default=dict, verbose_name='支撑数据')),
                ('time_range', models.JSONField(blank=True, default=dict, verbose_name='时间范围')),
                ('is_read', models.BooleanField(default=False, verbose_name='已读')),
                ('is_archived', models.BooleanField(default=False, verbose_name='已归档')),
                ('user_feedback', models.CharField(blank=True, choices=[('helpful', '有帮助'), ('not_helpful', '没帮助'), ('inaccurate', '不准确')], max_length=20, verbose_name='用户反馈')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='阅读时间')),
                ('analysis_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='insights', to='ai_analysis.aianalysisresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emotion_insights', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '情绪洞察',
                'verbose_name_plural': '情绪洞察',
                'db_table': 'emotion_insights',
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AIRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('immediate_coping', '即时应对'), ('long_term_strategy', '长期策略'), ('lifestyle_change', '生活方式'), ('social_support', '社交支持'), ('professional_help', '专业帮助'), ('self_care', '自我关怀'), ('skill_development', '技能发展')], max_length=30, verbose_name='建议类型')),
                ('title', models.CharField(max_length=200, verbose_name='标题')),
                ('content', models.TextField(max_length=2000, verbose_name='内容')),
                ('action_steps', models.JSONField(blank=True, default=list, verbose_name='行动步骤')),
                ('difficulty_level', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='难度等级')),
                ('estimated_time', models.CharField(blank=True, max_length=50, verbose_name='预估时间')),
                ('personalization_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='个性化程度')),
                ('relevance_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='相关度')),
                ('is_applied', models.BooleanField(default=False, verbose_name='已应用')),
                ('effectiveness_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='效果评分')),
                ('user_notes', models.TextField(blank=True, max_length=500, verbose_name='用户笔记')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('applied_at', models.DateTimeField(blank=True, null=True, verbose_name='应用时间')),
                ('analysis_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='ai_analysis.aianalysisresult')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI建议',
                'verbose_name_plural': 'AI建议',
                'db_table': 'ai_recommendations',
                'ordering': ['-relevance_score', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='actionplan',
            name='recommendations',
            field=models.ManyToManyField(blank=True, related_name='action_plans', to='ai_analysis.airecommendation'),
        ),
        migrations.AddField(
            model_name='actionplan',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='action_plans', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AIModelUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='日期')),
                ('total_requests', models.PositiveIntegerField(default=0, verbose_name='总请求数')),
                ('successful_requests', models.PositiveIntegerField(default=0, verbose_name='成功请求数')),
                ('failed_requests', models.PositiveIntegerField(default=0, verbose_name='失败请求数')),
                ('basic_analysis_count', models.PositiveIntegerField(default=0, verbose_name='基础分析次数')),
                ('deep_analysis_count', models.PositiveIntegerField(default=0, verbose_name='深度分析次数')),
                ('recommendation_count', models.PositiveIntegerField(default=0, verbose_name='建议生成次数')),
                ('total_processing_time', models.FloatField(default=0.0, verbose_name='总处理时间(秒)')),
                ('average_processing_time', models.FloatField(default=0.0, verbose_name='平均处理时间(秒)')),
                ('token_usage', models.PositiveIntegerField(default=0, verbose_name='Token使用量')),
                ('estimated_cost', models.DecimalField(decimal_places=4, default=0.0, max_digits=10, verbose_name='预估成本(元)')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_usage_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'AI模型使用统计',
                'verbose_name_plural': 'AI模型使用统计',
                'db_table': 'ai_model_usage',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['user', '-created_at'], name='ai_analysis_user_id_e0c15a_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['status'], name='ai_analysis_status_5a4188_idx'),
        ),
        migrations.AddIndex(
            model_name='aianalysisresult',
            index=models.Index(fields=['analysis_type'], name='ai_analysis_analysi_f50a15_idx'),
        ),
    ]
