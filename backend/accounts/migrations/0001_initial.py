# Generated by Django 4.2.7 on 2025-06-22 08:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=50, verbose_name='昵称')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='头像')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='个人简介')),
                ('gender', models.CharField(choices=[('M', '男'), ('F', '女'), ('O', '其他'), ('N', '不愿透露')], default='N', max_length=1, verbose_name='性别')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='出生日期')),
                ('timezone_setting', models.CharField(default='Asia/Shanghai', max_length=50, verbose_name='时区设置')),
                ('notification_enabled', models.BooleanField(default=True, verbose_name='推送通知')),
                ('daily_reminder_time', models.TimeField(default='21:00', verbose_name='每日提醒时间')),
                ('theme_preference', models.CharField(default='auto', max_length=20, verbose_name='主题偏好')),
                ('data_sharing_consent', models.BooleanField(default=False, verbose_name='数据分享同意')),
                ('analytics_consent', models.BooleanField(default=True, verbose_name='数据分析同意')),
                ('total_records', models.PositiveIntegerField(default=0, verbose_name='总记录数')),
                ('streak_days', models.PositiveIntegerField(default=0, verbose_name='连续记录天数')),
                ('last_record_date', models.DateField(blank=True, null=True, verbose_name='最后记录日期')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('occupation', models.CharField(blank=True, choices=[('student', '学生'), ('employee', '职员'), ('freelancer', '自由职业者'), ('entrepreneur', '创业者'), ('retired', '退休'), ('unemployed', '待业'), ('other', '其他')], max_length=20, verbose_name='职业')),
                ('work_stress_level', models.IntegerField(default=3, help_text='1-5级', verbose_name='工作压力等级')),
                ('sleep_time', models.TimeField(blank=True, null=True, verbose_name='平均睡觉时间')),
                ('wake_time', models.TimeField(blank=True, null=True, verbose_name='平均起床时间')),
                ('exercise_frequency', models.IntegerField(default=0, verbose_name='运动频率(次/周)')),
                ('anxiety_tendency', models.IntegerField(default=3, help_text='1-5级', verbose_name='焦虑倾向')),
                ('depression_tendency', models.IntegerField(default=3, help_text='1-5级', verbose_name='抑郁倾向')),
                ('stress_coping_ability', models.IntegerField(default=3, help_text='1-5级', verbose_name='压力应对能力')),
                ('preferred_analysis_depth', models.CharField(default='moderate', max_length=20, verbose_name='偏好分析深度')),
                ('favorite_emotions', models.JSONField(blank=True, default=list, verbose_name='常用情绪标签')),
                ('favorite_scenarios', models.JSONField(blank=True, default=list, verbose_name='常用场景标签')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户档案',
                'verbose_name_plural': '用户档案',
                'db_table': 'user_profiles',
            },
        ),
    ]
