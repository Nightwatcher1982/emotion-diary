# Generated by Django 4.2.7 on 2025-06-22 08:16

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmotionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(help_text='用户对当前情绪的文字描述', max_length=1000, verbose_name='情绪描述')),
                ('emotion_type', models.CharField(choices=[('happy', '快乐'), ('sad', '悲伤'), ('angry', '愤怒'), ('anxious', '焦虑'), ('calm', '平静'), ('fearful', '恐惧'), ('excited', '兴奋'), ('frustrated', '沮丧'), ('grateful', '感激'), ('lonely', '孤独'), ('confident', '自信'), ('overwhelmed', '不知所措')], max_length=20, verbose_name='主要情绪')),
                ('intensity', models.IntegerField(help_text='1-10级', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='情绪强度')),
                ('scenario', models.CharField(choices=[('work', '工作'), ('study', '学习'), ('family', '家庭'), ('social', '社交'), ('health', '健康'), ('finance', '财务'), ('relationship', '感情'), ('personal', '个人成长'), ('entertainment', '娱乐'), ('travel', '旅行'), ('other', '其他')], max_length=20, verbose_name='发生场景')),
                ('location', models.CharField(blank=True, max_length=100, verbose_name='地点')),
                ('weather', models.CharField(blank=True, max_length=50, verbose_name='天气')),
                ('triggers', models.JSONField(blank=True, default=list, help_text='导致该情绪的具体事件或因素', verbose_name='触发因素')),
                ('people_involved', models.JSONField(blank=True, default=list, help_text='涉及的人员关系', verbose_name='相关人员')),
                ('physical_symptoms', models.JSONField(blank=True, default=list, help_text='伴随的身体反应', verbose_name='身体症状')),
                ('coping_methods', models.JSONField(blank=True, default=list, help_text='用户采取的应对措施', verbose_name='应对方式')),
                ('effectiveness_rating', models.IntegerField(blank=True, help_text='应对方式的效果评分1-5', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='应对效果')),
                ('is_private', models.BooleanField(default=False, verbose_name='私密记录')),
                ('enable_ai_analysis', models.BooleanField(default=True, verbose_name='启用AI分析')),
                ('emotion_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='情绪发生时间')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='记录时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('is_analyzed', models.BooleanField(default=False, verbose_name='已分析')),
                ('analysis_requested_at', models.DateTimeField(blank=True, null=True, verbose_name='请求分析时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emotion_records', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '情绪记录',
                'verbose_name_plural': '情绪记录',
                'db_table': 'emotion_records',
                'ordering': ['-emotion_time'],
            },
        ),
        migrations.CreateModel(
            name='EmotionTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='标签名称')),
                ('category', models.CharField(choices=[('emotion', '情绪类型'), ('intensity', '强度描述'), ('trigger', '触发因素'), ('symptom', '症状表现'), ('coping', '应对方式'), ('outcome', '结果状态')], max_length=20, verbose_name='标签分类')),
                ('color', models.CharField(default='#007AFF', help_text='十六进制颜色值', max_length=7, verbose_name='显示颜色')),
                ('icon', models.CharField(blank=True, max_length=50, verbose_name='图标')),
                ('description', models.TextField(blank=True, max_length=200, verbose_name='描述')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='使用次数')),
                ('is_system', models.BooleanField(default=False, help_text='系统预设标签不可删除', verbose_name='系统标签')),
                ('is_active', models.BooleanField(default=True, verbose_name='启用状态')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '情绪标签',
                'verbose_name_plural': '情绪标签',
                'db_table': 'emotion_tags',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmotionPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pattern_type', models.CharField(choices=[('daily', '日常模式'), ('weekly', '周期模式'), ('seasonal', '季节模式'), ('trigger', '触发模式'), ('social', '社交模式'), ('work', '工作模式')], max_length=20, verbose_name='模式类型')),
                ('pattern_data', models.JSONField(help_text='具体的模式分析结果', verbose_name='模式数据')),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)], verbose_name='置信度')),
                ('start_date', models.DateField(verbose_name='开始日期')),
                ('end_date', models.DateField(verbose_name='结束日期')),
                ('record_count', models.PositiveIntegerField(verbose_name='记录数量')),
                ('dominant_emotion', models.CharField(max_length=20, verbose_name='主导情绪')),
                ('average_intensity', models.FloatField(verbose_name='平均强度')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emotion_patterns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '情绪模式',
                'verbose_name_plural': '情绪模式',
                'db_table': 'emotion_patterns',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmotionGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_type', models.CharField(choices=[('reduce_negative', '减少负面情绪'), ('increase_positive', '增加正面情绪'), ('improve_stability', '提高情绪稳定性'), ('enhance_awareness', '增强情绪觉察'), ('better_coping', '改善应对方式'), ('custom', '自定义目标')], max_length=20, verbose_name='目标类型')),
                ('title', models.CharField(max_length=100, verbose_name='目标标题')),
                ('description', models.TextField(max_length=500, verbose_name='目标描述')),
                ('target_value', models.FloatField(help_text='根据目标类型设定的数值目标', verbose_name='目标值')),
                ('current_value', models.FloatField(default=0.0, verbose_name='当前值')),
                ('unit', models.CharField(default='次', max_length=20, verbose_name='单位')),
                ('start_date', models.DateField(verbose_name='开始日期')),
                ('target_date', models.DateField(verbose_name='目标日期')),
                ('reminder_frequency', models.CharField(default='daily', max_length=20, verbose_name='提醒频率')),
                ('status', models.CharField(choices=[('active', '进行中'), ('completed', '已完成'), ('paused', '已暂停'), ('cancelled', '已取消')], default='active', max_length=20, verbose_name='状态')),
                ('completion_rate', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)], verbose_name='完成率')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('completed_at', models.DateTimeField(blank=True, null=True, verbose_name='完成时间')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emotion_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '情绪目标',
                'verbose_name_plural': '情绪目标',
                'db_table': 'emotion_goals',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecordTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='emotions.emotionrecord')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='emotions.emotiontag')),
            ],
            options={
                'verbose_name': '记录标签',
                'verbose_name_plural': '记录标签',
                'db_table': 'record_tags',
                'unique_together': {('record', 'tag')},
            },
        ),
        migrations.AddIndex(
            model_name='emotionrecord',
            index=models.Index(fields=['user', '-emotion_time'], name='emotion_rec_user_id_3603f4_idx'),
        ),
        migrations.AddIndex(
            model_name='emotionrecord',
            index=models.Index(fields=['emotion_type'], name='emotion_rec_emotion_706a36_idx'),
        ),
        migrations.AddIndex(
            model_name='emotionrecord',
            index=models.Index(fields=['scenario'], name='emotion_rec_scenari_ff22ca_idx'),
        ),
        migrations.AddIndex(
            model_name='emotionrecord',
            index=models.Index(fields=['is_analyzed'], name='emotion_rec_is_anal_b949c6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emotionpattern',
            unique_together={('user', 'pattern_type', 'start_date', 'end_date')},
        ),
    ]
